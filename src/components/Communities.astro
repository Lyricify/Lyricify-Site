---
import { Community } from "../data/LyricifyCustomTypes";

interface Props {
  communities: Array<Community>;
  language?: string;
}
import { Labels } from "@data/DataHelper";
const wordIsFullMap = Labels["label.communityIsFull"];

const { communities, language = Astro.currentLocale } = Astro.props;
---

<ul>
  {
    communities.map((item) => {
      if (!language && item.name instanceof Object) {
        throw new Error("String is not localizable");
      }

      const communityName =
        item.name instanceof Object ? item.name[language] : item.name;
      const communityHasUrl = !!item.url;
      const communityIsFull = !!item.isFull;
      const wordIsFull = wordIsFullMap[language];
      const communityValue = item.value;

      const tmplWithUrl = (
        <a href={item.url} style="text-decoration: none">
          {communityValue}
        </a>
      );
      const tmpl = <code>{item.value}</code>;
      const tmplFull = (
        <>
          <del>
            <code>{item.value}</code>
          </del>
          <b>{wordIsFull}</b>
        </>
      );
      const tmplWithUrlFull = (
        <>
          <del>
            <a href={item.url} style="text-decoration: none">
              {communityValue}
            </a>
          </del>
          <b>{wordIsFull}</b>
        </>
      );

      return (
        <li>
          <p>
            <b>{communityName}</b>:
            {communityHasUrl ? (
              communityIsFull ? (
                <Fragment set:html={tmplWithUrlFull} />
              ) : (
                <Fragment set:html={tmplWithUrl} />
              )
            ) : communityIsFull ? (
              <Fragment set:html={tmplFull} />
            ) : (
              <Fragment set:html={tmpl} />
            )}
          </p>
        </li>
      );
    })
  }
</ul>
