---
import CallToAction from '@astrojs/starlight/components/CallToAction.astro';
import type {Props} from '@astrojs/starlight/props';
import {Image} from 'astro:assets';

import LyricifyTitle from './LyricifyTitle.astro';

const {data} = Astro.props.entry;
const {title = data.title, tagline, image, actions = []} = data.hero || {};

const imageAttrs = {
    loading: 'eager' as const,
    decoding: 'async' as const,
    width: 400,
    height: 400,
    alt: image?.alt || '',
};

let darkImage: ImageMetadata | undefined;
let lightImage: ImageMetadata | undefined;
let rawHtml: string | undefined;
if (image) {
    if ('file' in image) {
        // @ts-ignore
        darkImage = image.file;
    } else if ('dark' in image) {
        // @ts-ignore
        darkImage = image.dark;
        // @ts-ignore
        lightImage = image.light;
    } else {
        // @ts-ignore
        rawHtml = image.html;
    }
}
---

<div class='hero'>
    {
        darkImage && (
            <Image
                src={darkImage}
                {...imageAttrs}
                class:list={{'light:sl-hidden': Boolean(lightImage)}}
            />
        )
    }
    {
        lightImage && (
            <Image src={lightImage} {...imageAttrs} class='dark:sl-hidden' />
        )
    }
    {rawHtml && <div class='hero-html sl-flex' set:html={rawHtml} />}
    <div class='sl-flex stack'>
        <div class='sl-flex copy'>
            <LyricifyTitle data-page-title title={title} />
            {tagline && <div class='tagline' set:html={tagline} />}
        </div>
        {
            actions.length > 0 && (
                <div class='sl-flex actions'>
                    {actions.map(({text, ...attrs}) => (
                        // @ts-ignore
                        <CallToAction {...attrs} set:html={text} />
                    ))}
                </div>
            )
        }
    </div>
</div>

<style>
    .hero {
        display: grid;
        align-items: center;
        gap: 1rem;
        padding-bottom: 1rem;
    }

    .hero > img,
    .hero > .hero-html {
        object-fit: contain;
        width: min(70%, 20rem);
        height: auto;
        margin-inline: auto;
    }

    .stack {
        flex-direction: column;
        gap: clamp(1.5rem, calc(1.5rem + 1vw), 2rem);
        text-align: center;
    }

    .copy {
        flex-direction: column;
        gap: 1rem;
        align-items: center;
    }

    .copy > * {
        max-width: 50ch;
    }

    .tagline {
        font-size: clamp(
            var(--sl-text-base),
            calc(0.0625rem + 2vw),
            var(--sl-text-xl)
        );
        color: var(--sl-color-gray-2);
    }

    .actions {
        gap: 1rem 2rem;
        flex-wrap: wrap;
        justify-content: center;
    }

    @media (min-width: 50rem) {
        .hero {
            grid-template-columns: 7fr 4fr;
            gap: 3%;
            padding-block: clamp(2.5rem, calc(1rem + 10vmin), 10rem);
        }

        .hero > img,
        .hero > .hero-html {
            order: 2;
            width: min(100%, 25rem);
        }

        .stack {
            text-align: start;
        }

        .copy {
            align-items: flex-start;
        }

        .actions {
            justify-content: flex-start;
        }
    }
</style>
